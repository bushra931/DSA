class Solution {
  public:
    vector<int> longestIncreasingSubsequence(vector<int>& arr) {
      int n=arr.size();
      vector<int> dp(n,1),hash(n);
      int maxi=1;
      int lastindex=0;
      for(int i=0;i<n;i++){
        hash[i]=i;
        for(int prev=0;prev<i;prev++){
          if(arr[prev]<arr[i] && 1+dp[prev]>dp[i]){
            dp[i]=1+dp[prev];
            hash[i]=prev;
          }
          if(dp[i]>maxi){
            maxi=dp[i];
            lastindex=i;
          }
        }
      }
      vector<int> temp;
      temp.push_back(arr[lastindex]);
      while(hash[lastindex]!=lastindex){
        lastindex=hash[lastindex];
        temp.push_back(arr[lastindex]);
      }
      reverse(temp.begin(),temp.end());
      return temp;


}
};


//binary seach lis
class Solution {
public:
    int LIS(vector<int>& arr) {
        int n = arr.size();
        vector<int> temp;
        temp.push_back(arr[0]);
        
        for (int i = 1; i < n; i++) {
            if (arr[i] > temp.back()) {
                temp.push_back(arr[i]);
            } else {
                // Get the index from the iterator
                int ind = lower_bound(temp.begin(), temp.end(), arr[i]) - temp.begin();
                temp[ind] = arr[i];
            }
        }
        
        return temp.size(); // Length of LIS
    }
};
