 string findOrder(vector<string> &words) {
        vector<int> adj[26], inDegree(26, 0);
        vector<int> exist(26, 0);
        
        // Step 1: Identify all unique characters
        for (string &word : words) {
            for (char ch : word) {
                exist[ch - 'a'] = 1;
            }
        }

        // Step 2: Build the Graph
        for (int i = 0; i < words.size() - 1; i++) {
            string &s1 = words[i], &s2 = words[i + 1];
            int len = min(s1.size(), s2.size());
            bool found = false;
            
            for (int j = 0; j < len; j++) {
                if (s1[j] != s2[j]) {
                    adj[s1[j] - 'a'].push_back(s2[j] - 'a');
                    inDegree[s2[j] - 'a']++;  // Increase in-degree for s2[j]
                    found = true;
                    break;
                }
            }

            // Invalid Case: Prefix issue (e.g., "abc" before "ab")
            if (!found && s1.size() > s2.size()) return "";
        }

        // Step 3: Topological Sort (BFS - Kahn's Algorithm)
        queue<int> q;
        string ans = "";

        // Push nodes with in-degree 0
        for (int i = 0; i < 26; i++) {
            if (exist[i] && inDegree[i] == 0) {
                q.push(i);
            }
        }

        while (!q.empty()) {
            int node = q.front();
            q.pop();
            ans += (char)(node + 'a');

            for (int neighbor : adj[node]) {
                inDegree[neighbor]--;
                if (inDegree[neighbor] == 0) {
                    q.push(neighbor);
                }
            }
        }

        // If all characters are not included, there was a cycle
        return ans.size() == count(exist.begin(), exist.end(), 1) ? ans : "";
    }
