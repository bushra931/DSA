class Solution {
private:
    // Helper function to perform DFS and check for cycles
    bool dfscheck(int node, vector<int> adj[], int vis[], int pathvis[]) {
        // Mark the current node as visited
        vis[node] = 1;
        // Mark the current node as part of the current DFS recursion stack
        pathvis[node] = 1;

        // Traverse all adjacent nodes of the current node
        for (auto it : adj[node]) {
            // If the adjacent node is not visited, perform DFS on it
            if (!vis[it]) {
                if (dfscheck(it, adj, vis, pathvis)) 
                    return true; // Cycle found
            } 
            // If the adjacent node is already visited and is part of the recursion stack, cycle exists
            else if (pathvis[it]) {  
                return true; // Cycle detected
            }
        }
        
        // Backtrack: Remove the current node from the recursion stack
        pathvis[node] = 0; 
        return false;
    }

public:
    // Function to detect a cycle in a directed graph
    bool isCyclic(int N, vector<int> adj[]) {
        // Arrays to keep track of visited nodes and nodes in the current DFS path
        int vis[N] = {0};      // Tracks if a node has been visited
        int pathvis[N] = {0};  // Tracks if a node is part of the current DFS path
        
        // Traverse all nodes (handles disconnected graphs as well)
        for (int i = 0; i < N; i++) {
            if (!vis[i]) {  // If the node is not visited, start DFS
                if (dfscheck(i, adj, vis, pathvis)) {
                    return true; // Cycle found
                }
            }
        }
        
        return false; // No cycle detected
    }
};
