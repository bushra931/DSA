   private:
    bool dfs(int node,int parent,vector<vector<int>>& adj,int vis[]){
        vis[node]=1;
        for(auto it:adj[node]){
            if(!vis[it]){
                if(dfs(it,node,adj,vis)) return true;
            }
            else if(it!=parent){
                return true;
            }
        }
        return false;
    }
      
  public:
    // Function to detect cycle in an undirected graph.
    bool isCycle(vector<vector<int>>& adj) {
        int v=adj.size();
        int vis[v]={0};
        for(int i=0;i<v;i++){
            if(!vis[i]){
               if(dfs(i,-1,adj,vis)) return true;
            }
        }
        return false;
        
    }
