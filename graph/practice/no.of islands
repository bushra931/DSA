class Solution{
public:
   void dfs(int row,int col,vector<vector<char>>& mat,vector<vector<int>>& vis){
        vis[row][col]=1;
        int m=mat.size();
        int n=mat[0].size();
        //neighbours 
        for(int delrow=-1;delrow<=1;delrow++){
            for(int delcol=-1;delcol<=1;delcol++){
                int nrow=row+delrow;
                int ncol=col+delcol;
                if(nrow>=0 && ncol>=0 && nrow<m && ncol<n && !vis[nrow][ncol]&& mat[nrow][ncol]=='1'){
                      dfs(nrow,ncol,mat,vis);
            } 

            }

        }
    }
    int numIslands(vector<vector<char>> &mat){
        int m=mat.size();
        int n=mat[0].size();
        vector<vector<int>> vis(m,vector<int>(n,0));
        int cnt=0;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(!vis[i][j] && mat[i][j]=='1'){
                    cnt++;
                    dfs(i,j,mat,vis);
                }
            }
        }
        return cnt;

    }
};
