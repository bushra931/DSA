 // Set to store the currently loaded pages
        unordered_set<int> s;

        // Map to store the index of each page
        unordered_map<int, int> indexes;

        // Variable to store the number of page faults
        int page_faults = 0;

        // Loop through all the pages
        for (int i = 0;i < N; i++){

            // Check if there is still space in memory
            if (s.size() < C){
                // Check if the page is already in memory
                if (s.find(pages[i]) == s.end()){
                    // If not, add the page to memory and increment page_faults
                    s.insert(pages[i]);
                    page_faults++;
                }
                // Store the current index of the page
                indexes[pages[i]] = i;
            }

            // If memory is full
            else{
                // Check if the page is already in memory
                if (s.find(pages[i]) == s.end()){
                    // Find the least recently used (LRU) page
                    int lru = INT_MAX, val;
                    for (auto it = s.begin();it != s.end(); it++){
                        if (indexes[*it] < lru){
                            lru = indexes[*it];
                            val = *it;
                        }
                    }
                    // Remove the LRU page and add the current page
                    s.erase(val);
                    s.insert(pages[i]);
                    page_faults++;
                }
                // Update the index of the current page
                indexes[pages[i]] = i;
            }
        }
        // Return the total number of page faults
        return page_faults;
